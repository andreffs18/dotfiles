#!/usr/bin/env bash

# Remove all runnning processes for given name
# eg: $ killps chrome
function killps(){
    ps -ef | grep $1 | grep -v grep | awk '{print $2}' | xargs kill -9;
}


# Find given string on given folder
# eg: $ findstr "documents.txt" .
function findstr(){
    find $1 \( -name node_modules -prune \) -o -name "*.py" -exec grep --color -Hn "$2" {} 2>/dev/null \;
}


# Select random emoji and display it as "Hello" screen.
function olhaaqui(){
  FOLDER=~/.emoji
  # Create folder if doesnt exist
  mkdir -p $FOLDER
  EMOJIES=(üí© üöÄ ‚ùóÔ∏è üò≠ üéâ üéÅ üòò üëã üíé ü§ñ üêá üáµüáπ)
  # Get random emoji from list
  INDEX=$(expr $RANDOM % ${#EMOJIES[@]}) # get index between [0, len(emojies)]
  INDEX=$(($INDEX>0 ? $INDEX : 1)) # max(index, 1)
  EMOJI=${EMOJIES[$INDEX]}

  # Check if emoji was previously used. If so use that, otherwise, download it.
  pushd ~/ &>/dev/null
  if [ ! -f "$FOLDER/$EMOJI.txt" ] ; then
    echo "Downloading \"$EMOJI\"..."
    # Download image using Emoji API
    wget --quiet "https://xn--i-7iq.ws/emoji-image/$EMOJI.png?format\=emojione\&ar\=1x1" -O $FOLDER/$EMOJI.png
    # Convert image from .png to .jpg
    magick convert $FOLDER/$EMOJI.png $FOLDER/$EMOJI.jpg
    # Convert image to ascii art
    jp2a --size=96x46 $FOLDER/$EMOJI.jpg --output=$FOLDER/$EMOJI.txt
    # Replace all border "M" characters with empty space
    sed -i.bak "s/M/ /g" $FOLDER/$EMOJI.txt
    # Delete temp files
    rm $FOLDER/$EMOJI.png $FOLDER/$EMOJI.jpg $FOLDER/$EMOJI.txt.bak
  fi
  popd &>/dev/null || true

  # Print image
  cat $FOLDER/$EMOJI.txt | lolcat
}

# Shortcut to get a random article from my Feedly account from the "Saved for Later" tag
# eg: $ sfl 10
function sfl(){
	python3 $HOME/.dotfiles/bin/feedly_read_later.py $@
}

# Utility to update FEEDLY_TOKEN and push it to keybase
# eg: $ update_feedly_token $FEEDLY_TOKEN
function update_feedly_token(){
  read -r -d '' FEEDLY << EOM
\n# Feedly TOKEN. Only valid for 30 days since creation
export FEEDLY_TOKEN=$1
EOM
  # Write new token into local .secrets and save them in keybase copy
  echo $FEEDLY | keybase fs write --append keybase://private/andreffs18/.secrets
  echo $FEEDLY >> ~/.secrets
  echo "‚úÖ Updated Feedly Token with sucess! Open new tab to reload configuration."
}

# Function to decode jwt tokens. Works like this:
# $ jwtd eyJh....
# Source: https://gist.github.com/thomasdarimont/46358bc8167fce059d83a1ebdb92b0e7
function jwtd(){
  jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "$1"
}

# Function to generate passwords with given length:
# $ pwdgen 22
function pwdgen(){
  perl -pe 'binmode(STDIN, ":bytes"); tr/A-Za-z0-9_\!\@\#\$\%\^\&\*\(\)-+=//dc;' < /dev/urandom | head -c $1
}

# Update local version of my dotfiles by pulling them from github and sources /apps folder
function update_dotfiles(){
  pushd ~/.dotfiles
  ggpull || exit 1
  source ~/.dotfiles/install/apps
  popd
  echo "‚úÖ Updated ~/.dotfiles!"
}

# Push all secrets (~/.aws, ~/.ssh, ~/.secrets, ~/.unbabelconfigs) to keybase://private folder
# $ kbpush
function kbpush() {
  echo "üîÑ Starting keybase push operation..."

  KB="keybase://private/$(keybase whoami)"
  echo "üìç Target location: $KB"

  # Handle .aws directory
  echo ""
  echo "1/4 Processing ~/.aws..."
  echo "  ‚è≥ Removing old $KB/.aws"
  keybase fs rm -r "$KB/.aws" >/dev/null 2>&1
  echo "  ‚è≥ Copying ~/.aws to $KB/"
  keybase fs cp -r ~/.aws "$KB/"
  echo "  ‚úÖ ~/.aws completed"

  # Handle .ssh directory
  echo ""
  echo "2/4 Processing ~/.ssh..."
  echo "  ‚è≥ Removing old $KB/.ssh"
  keybase fs rm -r "$KB/.ssh" >/dev/null 2>&1
  echo "  ‚è≥ Copying ~/.ssh to $KB/"
  keybase fs cp -r ~/.ssh "$KB/"
  echo "  ‚úÖ ~/.ssh completed"

  # Handle .secrets file
  echo ""
  echo "3/4 Processing ~/.secrets..."
  echo "  ‚è≥ Removing old $KB/.secrets"
  keybase fs rm "$KB/.secrets" >/dev/null 2>&1
  echo "  ‚è≥ Copying ~/.secrets to $KB/"
  keybase fs cp ~/.secrets "$KB/"
  echo "  ‚úÖ ~/.secrets completed"


  # Handle .unbabelconfigs directory
  echo ""
  echo "4/4 Processing ~/.unbabelconfigs..."
  echo "  ‚è≥ Removing old $KB/.unbabelconfigs"
  keybase fs rm -r "$KB/.unbabelconfigs" >/dev/null 2>&1
  echo "  ‚è≥ Copying ~/.unbabelconfigs to $KB/"
  keybase fs cp -r ~/.unbabelconfigs "$KB/"
  echo "  ‚úÖ ~/.unbabelconfigs completed"

  echo ""
  echo "‚úÖ All secrets successfully pushed to $KB"
}

# Pull all secrets (~/.aws, ~/.ssh, ~/.secrets, ~/.unbabelconfigs) from keybase://private folder
# $ kbpull
function kbpull() {
  echo "üîÑ Starting keybase pull operation..."

  KB="keybase://private/$(keybase whoami)"
  echo "üìç Source location: $KB"

  # Handle .aws directory
  echo ""
  echo "1/4 Pulling ~/.aws..."
  if [ -d ~/.aws ]; then
    echo "  üíæ Backing up existing ~/.aws to ~/.aws-bak"
    rm -rf ~/.aws-bak >/dev/null 2>&1
    mv ~/.aws ~/.aws-bak
  fi
  echo "  ‚è≥ Copying $KB/.aws to ~/.aws"
  keybase fs cp -r "$KB/.aws" ~/
  echo "  ‚úÖ ~/.aws completed"

  # Handle .ssh directory
  echo ""
  echo "2/4 Pulling ~/.ssh..."
  if [ -d ~/.ssh ]; then
    echo "  üíæ Backing up existing ~/.ssh to ~/.ssh-bak"
    rm -rf ~/.ssh-bak >/dev/null 2>&1
    mv ~/.ssh ~/.ssh-bak
  fi
  echo "  ‚è≥ Copying $KB/.ssh to ~/.ssh"
  keybase fs cp -r "$KB/.ssh" ~/
  echo "  ‚úÖ ~/.ssh completed"

  # Handle .secrets file
  echo ""
  echo "3/4 Pulling ~/.secrets..."
  if [ -f ~/.secrets ]; then
    echo "  üíæ Backing up existing ~/.secrets to ~/.secrets-bak"
    rm -f ~/.secrets-bak >/dev/null 2>&1
    mv ~/.secrets ~/.secrets-bak
  fi
  echo "  ‚è≥ Copying $KB/.secrets to ~/.secrets"
  keybase fs cp "$KB/.secrets" ~/.secrets
  echo "  ‚úÖ ~/.secrets completed"


  # Handle .unbabelconfigs directory
  echo ""
  echo "4/4 Pulling ~/.unbabelconfigs..."
  if [ -d ~/.unbabelconfigs ]; then
    echo "  üíæ Backing up existing ~/.unbabelconfigs to ~/.unbabelconfigs-bak"
    rm -rf ~/.unbabelconfigs-bak >/dev/null 2>&1
    mv ~/.unbabelconfigs ~/.unbabelconfigs-bak
  fi
  echo "  ‚è≥ Copying $KB/.unbabelconfigs to ~/.unbabelconfigs"
  keybase fs cp -r "$KB/.unbabelconfigs" ~/
  echo "  ‚úÖ ~/.unbabelconfigs completed"

  echo ""
  echo "‚úÖ All secrets successfully pulled from $KB"
  echo "üí° Tip: Previous versions backed up with -bak suffix"
}

log.success ".functions loaded with success!"
